[{"/Users/ayumi/git/personal/chess/src/reportWebVitals.js":"1","/Users/ayumi/git/personal/chess/src/index.js":"2","/Users/ayumi/git/personal/chess/src/shared/constants.js":"3","/Users/ayumi/git/personal/chess/src/App.js":"4","/Users/ayumi/git/personal/chess/src/features/Row/Row.js":"5","/Users/ayumi/git/personal/chess/src/app/store.js":"6","/Users/ayumi/git/personal/chess/src/features/Cell/Cell.js":"7","/Users/ayumi/git/personal/chess/src/features/Board/BoardSlice.js":"8","/Users/ayumi/git/personal/chess/src/features/Board/Board.js":"9"},{"size":362,"mtime":1607619579187,"results":"10","hashOfConfig":"11"},{"size":339,"mtime":1615846022743,"results":"12","hashOfConfig":"11"},{"size":547,"mtime":1616026677916,"results":"13","hashOfConfig":"11"},{"size":3986,"mtime":1615848570790,"results":"14","hashOfConfig":"11"},{"size":813,"mtime":1616015674996,"results":"15","hashOfConfig":"11"},{"size":198,"mtime":1616453896933,"results":"16","hashOfConfig":"11"},{"size":1923,"mtime":1616458048927,"results":"17","hashOfConfig":"11"},{"size":9092,"mtime":1616798015386,"results":"18","hashOfConfig":"11"},{"size":1450,"mtime":1615679472594,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"11gkq8g",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"/Users/ayumi/git/personal/chess/src/reportWebVitals.js",[],"/Users/ayumi/git/personal/chess/src/index.js",[],"/Users/ayumi/git/personal/chess/src/shared/constants.js",[],["41","42"],"/Users/ayumi/git/personal/chess/src/App.js",[],["43","44"],"/Users/ayumi/git/personal/chess/src/features/Row/Row.js",[],"/Users/ayumi/git/personal/chess/src/app/store.js",[],"/Users/ayumi/git/personal/chess/src/features/Cell/Cell.js",["45"],"import './Cell.css';\nimport {\n  useSelector,\n  useDispatch\n} from 'react-redux';\n\nimport {\n  selectBoard,\n  move,\n  selectCell,\n  colorPath\n} from '../Board/BoardSlice';\nimport constants from '../../shared/constants';\n\nexport default function Cell(props) {\n  const {\n          rowNum,\n          colNum,\n          bgColor,\n          ...rest\n        } = props;\n  let cellStyles = {...rest.cellStyles};\n  const dispatch = useDispatch();\n\n  // Set a piece om a cell if needed\n  const board = useSelector(selectBoard);\n  const piece = board.cells[rowNum][colNum].piece;\n  const pieceInfoCollection = constants.PIECES.info;\n  if (piece !== null) {\n    const pieceInfo = pieceInfoCollection.filter(info => info.name === piece);\n    cellStyles.backgroundImage = `url(${pieceInfo[0].img})`;\n    cellStyles.backgroundSize = 'contain';\n  }\n  // set the background color if it is selected\n  const checkIsSelected = (colNum, rowNum) => {\n    if (board.selected.column === colNum &&\n        board.selected.row    === rowNum) {\n      return board.selected.isSelected;\n    }\n    return false;\n  };\n  const checkIsOnPath = (colNum, rowNum) => {\n    return board.cells[rowNum][colNum].isOnPath;\n  };\n  const getClassNames = (colNum, rowNum) => {\n    // TODO:\n    //  if the cell it selected, it should be colored\n    let cellClassNames = checkIsSelected(colNum, rowNum) ?\n                           `cell ${bgColor} selected` :\n                           `cell ${bgColor}`;\n    //  if the cell is on the path, it should be colored\n     if(checkIsOnPath(colNum, rowNum)) {\n      cellClassNames = cellClassNames + ' path';\n     }\n    return cellClassNames;\n  }\n\n  return (\n    <div\n      id={`cell-${colNum}-${rowNum}`}\n      className={getClassNames(colNum, rowNum)}\n      style={cellStyles}\n      onClick={() => {\n        dispatch(selectCell({colNum, rowNum}));\n        dispatch(colorPath({colNum, rowNum}));\n      }}\n    >\n    </div>\n  )\n}\n","/Users/ayumi/git/personal/chess/src/features/Board/BoardSlice.js",[],"/Users/ayumi/git/personal/chess/src/features/Board/Board.js",[],{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"46","replacedBy":"50"},{"ruleId":"48","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":9,"column":3,"nodeType":"54","messageId":"55","endLine":9,"endColumn":7},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],["56"],["57"],"no-unused-vars","'move' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]