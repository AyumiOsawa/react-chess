[{"/Users/ayumi/git/personal/chess/src/features/Cell/Cell.js":"1","/Users/ayumi/git/personal/chess/src/features/Board/BoardSlice.js":"2","/Users/ayumi/git/personal/chess/src/index.js":"3","/Users/ayumi/git/personal/chess/src/features/Board/Board.js":"4","/Users/ayumi/git/personal/chess/src/shared/constants.js":"5"},{"size":1974,"mtime":1616972360341,"results":"6","hashOfConfig":"7"},{"size":9407,"mtime":1616969883402,"results":"8","hashOfConfig":"7"},{"size":339,"mtime":1615846022743,"results":"9","hashOfConfig":"7"},{"size":3015,"mtime":1616969372574,"results":"10","hashOfConfig":"7"},{"size":565,"mtime":1617138534427,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14","usedDeprecatedRules":"15"},"11gkq8g",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ayumi/git/personal/chess/src/features/Cell/Cell.js",["24"],"import './Cell.css';\nimport {\n  useSelector,\n  useDispatch\n} from 'react-redux';\n\nimport {\n  selectBoard,\n  move,\n  selectCell,\n  colorPath\n} from '../Board/BoardSlice';\nimport constants from '../../shared/constants';\n\nexport default function Cell(props) {\n  const {\n          rowNum,\n          colNum,\n          bgColor,\n          ...rest\n        } = props;\n  let cellStyles = {...rest.cellStyles};\n  const dispatch = useDispatch();\n// TODO: delete Row component and integrate it to Cell component\n  // Set a piece on a cell if needed\n  const board = useSelector(selectBoard);\n  const piece = board.cells[rowNum][colNum].piece;\n  const pieceInfoCollection = constants.PIECES.info;\n  if (piece !== null) {\n    const pieceInfo = pieceInfoCollection.filter(info => info.name === piece);\n    cellStyles.backgroundImage = `url(${pieceInfo[0].img})`;\n    cellStyles.backgroundSize = 'contain';\n  }\n  // set the background color if it is selected\n  const checkIsSelected = (colNum, rowNum) => {\n    if (board.selected.column === colNum &&\n        board.selected.row    === rowNum) {\n      return board.selected.isSelected;\n    }\n    return false;\n  };\n  const checkIsOnPath = (colNum, rowNum) => {\n    return board.cells[rowNum][colNum].isOnPath;\n  };\n  const getClassNames = (colNum, rowNum) => {\n    //  if the cell it selected, it should be colored\n    let cellClassNames = checkIsSelected(colNum, rowNum) ?\n                           `cell ${bgColor} selected` :\n                           `cell ${bgColor}`;\n    //  if the cell is on the path, it should be colored\n     if(checkIsOnPath(colNum, rowNum)) {\n      cellClassNames = cellClassNames + ' path';\n     }\n    return cellClassNames;\n  }\n\n  return (\n    <div\n      id={`cell-${colNum}-${rowNum}`}\n      className={getClassNames(colNum, rowNum)}\n      style={cellStyles}\n      onClick={() => {\n        dispatch(selectCell({colNum, rowNum}));\n        dispatch(colorPath({colNum, rowNum}));\n      }}\n    >\n    </div>\n  )\n}\n",["25","26"],"/Users/ayumi/git/personal/chess/src/features/Board/BoardSlice.js",[],"/Users/ayumi/git/personal/chess/src/index.js",[],"/Users/ayumi/git/personal/chess/src/features/Board/Board.js",[],"/Users/ayumi/git/personal/chess/src/shared/constants.js",[],{"ruleId":"27","severity":1,"message":"28","line":9,"column":3,"nodeType":"29","messageId":"30","endLine":9,"endColumn":7},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},"no-unused-vars","'move' is defined but never used.","Identifier","unusedVar","no-native-reassign",["35"],"no-negated-in-lhs",["36"],"no-global-assign","no-unsafe-negation"]