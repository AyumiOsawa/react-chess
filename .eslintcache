[{"/Users/ayumi/git/personal/chess/src/features/Cell/Cell.js":"1","/Users/ayumi/git/personal/chess/src/features/Board/BoardSlice.js":"2","/Users/ayumi/git/personal/chess/src/index.js":"3","/Users/ayumi/git/personal/chess/src/features/Board/Board.js":"4","/Users/ayumi/git/personal/chess/src/shared/constants.js":"5","/Users/ayumi/git/personal/chess/src/app/store.js":"6"},{"size":1974,"mtime":1616972360341,"results":"7","hashOfConfig":"8"},{"size":9601,"mtime":1617313171610,"results":"9","hashOfConfig":"8"},{"size":339,"mtime":1615846022743,"results":"10","hashOfConfig":"8"},{"size":3015,"mtime":1616969372574,"results":"11","hashOfConfig":"8"},{"size":565,"mtime":1617138534427,"results":"12","hashOfConfig":"8"},{"size":198,"mtime":1616453896933,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16","usedDeprecatedRules":"17"},"11gkq8g",{"filePath":"18","messages":"19","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ayumi/git/personal/chess/src/features/Cell/Cell.js",["29"],"import './Cell.css';\nimport {\n  useSelector,\n  useDispatch\n} from 'react-redux';\n\nimport {\n  selectBoard,\n  move,\n  selectCell,\n  colorPath\n} from '../Board/BoardSlice';\nimport constants from '../../shared/constants';\n\nexport default function Cell(props) {\n  const {\n          rowNum,\n          colNum,\n          bgColor,\n          ...rest\n        } = props;\n  let cellStyles = {...rest.cellStyles};\n  const dispatch = useDispatch();\n// TODO: delete Row component and integrate it to Cell component\n  // Set a piece on a cell if needed\n  const board = useSelector(selectBoard);\n  const piece = board.cells[rowNum][colNum].piece;\n  const pieceInfoCollection = constants.PIECES.info;\n  if (piece !== null) {\n    const pieceInfo = pieceInfoCollection.filter(info => info.name === piece);\n    cellStyles.backgroundImage = `url(${pieceInfo[0].img})`;\n    cellStyles.backgroundSize = 'contain';\n  }\n  // set the background color if it is selected\n  const checkIsSelected = (colNum, rowNum) => {\n    if (board.selected.column === colNum &&\n        board.selected.row    === rowNum) {\n      return board.selected.isSelected;\n    }\n    return false;\n  };\n  const checkIsOnPath = (colNum, rowNum) => {\n    return board.cells[rowNum][colNum].isOnPath;\n  };\n  const getClassNames = (colNum, rowNum) => {\n    //  if the cell it selected, it should be colored\n    let cellClassNames = checkIsSelected(colNum, rowNum) ?\n                           `cell ${bgColor} selected` :\n                           `cell ${bgColor}`;\n    //  if the cell is on the path, it should be colored\n     if(checkIsOnPath(colNum, rowNum)) {\n      cellClassNames = cellClassNames + ' path';\n     }\n    return cellClassNames;\n  }\n\n  return (\n    <div\n      id={`cell-${colNum}-${rowNum}`}\n      className={getClassNames(colNum, rowNum)}\n      style={cellStyles}\n      onClick={() => {\n        dispatch(selectCell({colNum, rowNum}));\n        dispatch(colorPath({colNum, rowNum}));\n      }}\n    >\n    </div>\n  )\n}\n",["30","31"],"/Users/ayumi/git/personal/chess/src/features/Board/BoardSlice.js",["32"],"/Users/ayumi/git/personal/chess/src/index.js",[],["33","34"],"/Users/ayumi/git/personal/chess/src/features/Board/Board.js",[],"/Users/ayumi/git/personal/chess/src/shared/constants.js",[],"/Users/ayumi/git/personal/chess/src/app/store.js",[],{"ruleId":"35","severity":1,"message":"36","line":9,"column":3,"nodeType":"37","messageId":"38","endLine":9,"endColumn":7},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":2,"message":"44","line":51,"column":26,"nodeType":"37","messageId":"45","endLine":51,"endColumn":36},{"ruleId":"39","replacedBy":"46"},{"ruleId":"41","replacedBy":"47"},"no-unused-vars","'move' is defined but never used.","Identifier","unusedVar","no-native-reassign",["48"],"no-negated-in-lhs",["49"],"no-undef","'setUpBoard' is not defined.","undef",["48"],["49"],"no-global-assign","no-unsafe-negation"]