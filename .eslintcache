[{"/Users/ayumi/git/personal/chess/src/reportWebVitals.js":"1","/Users/ayumi/git/personal/chess/src/index.js":"2","/Users/ayumi/git/personal/chess/src/shared/constants.js":"3","/Users/ayumi/git/personal/chess/src/App.js":"4","/Users/ayumi/git/personal/chess/src/features/Row/Row.js":"5","/Users/ayumi/git/personal/chess/src/app/store.js":"6","/Users/ayumi/git/personal/chess/src/features/Cell/Cell.js":"7","/Users/ayumi/git/personal/chess/src/features/Board/BoardSlice.js":"8","/Users/ayumi/git/personal/chess/src/features/Board/Board.js":"9","/Users/ayumi/git/personal/chess/src/features/Cell/CellSlice.js":"10"},{"size":362,"mtime":1607619579187,"results":"11","hashOfConfig":"12"},{"size":339,"mtime":1615846022743,"results":"13","hashOfConfig":"12"},{"size":547,"mtime":1616026677916,"results":"14","hashOfConfig":"12"},{"size":3986,"mtime":1615848570790,"results":"15","hashOfConfig":"12"},{"size":813,"mtime":1616015674996,"results":"16","hashOfConfig":"12"},{"size":285,"mtime":1616196000938,"results":"17","hashOfConfig":"12"},{"size":1597,"mtime":1616259594905,"results":"18","hashOfConfig":"12"},{"size":2284,"mtime":1616195963741,"results":"19","hashOfConfig":"12"},{"size":1450,"mtime":1615679472594,"results":"20","hashOfConfig":"12"},{"size":1441,"mtime":1616262574421,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"11gkq8g",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/ayumi/git/personal/chess/src/reportWebVitals.js",[],"/Users/ayumi/git/personal/chess/src/index.js",[],"/Users/ayumi/git/personal/chess/src/shared/constants.js",[],["46","47"],"/Users/ayumi/git/personal/chess/src/App.js",[],"/Users/ayumi/git/personal/chess/src/features/Row/Row.js",[],"/Users/ayumi/git/personal/chess/src/app/store.js",[],["48","49"],"/Users/ayumi/git/personal/chess/src/features/Cell/Cell.js",["50"],"import './Cell.css';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { selectBoard, move } from '../Board/BoardSlice';\nimport { selectSelected, selectCell } from '../Cell/CellSlice';\n\nimport constants from '../../shared/constants';\n\nexport default function Cell(props) {\n  const {\n          rowNum,\n          colNum,\n          bgColor,\n          ...rest\n        } = props;\n  let cellStyles = {...rest.cellStyles};\n  const dispatch = useDispatch();\n\n  // Set the piece, if there is one\n  const board = useSelector(selectBoard);\n  const piece = board[rowNum][colNum].piece;\n  const pieceInfoCollection = constants.PIECES.info;\n  if (piece !== null) {\n    const pieceInfo = pieceInfoCollection.filter(info => info.name === piece);\n    cellStyles.backgroundImage = `url(${pieceInfo[0].img})`;\n    cellStyles.backgroundSize = 'contain';\n  }\n\n  // set the background color, if it is selected\n  const selectedCell = useSelector(selectSelected);\n  const isSelected = (colNum, rowNum) => {\n    if (selectedCell.column === colNum && selectedCell.row === rowNum) {\n      return selectedCell.isSelected;\n    }\n    return false;\n  }\n  const cellClassNames = isSelected(colNum, rowNum) ?\n                         `cell ${bgColor} selected` :\n                         `cell ${bgColor}`\n  //  TODO: debug the styling issue\n  console.log('cellClassNames',cellClassNames);\n  return (\n    <div\n      id={`cell-${colNum}-${rowNum}`}\n      className={cellClassNames}\n      style={cellStyles}\n      onClick={() => {\n        return dispatch(selectCell({colNum, rowNum}));\n      }}\n    >\n    </div>\n  )\n}\n","/Users/ayumi/git/personal/chess/src/features/Board/BoardSlice.js",[],"/Users/ayumi/git/personal/chess/src/features/Board/Board.js",[],["51","52"],"/Users/ayumi/git/personal/chess/src/features/Cell/CellSlice.js",["53"],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"54","replacedBy":"58"},{"ruleId":"56","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":4,"column":23,"nodeType":"62","messageId":"63","endLine":4,"endColumn":27},{"ruleId":"54","replacedBy":"64"},{"ruleId":"56","replacedBy":"65"},{"ruleId":"60","severity":1,"message":"66","line":3,"column":8,"nodeType":"62","messageId":"63","endLine":3,"endColumn":17},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],["67"],["68"],"no-unused-vars","'move' is defined but never used.","Identifier","unusedVar",["67"],["68"],"'constants' is defined but never used.","no-global-assign","no-unsafe-negation"]